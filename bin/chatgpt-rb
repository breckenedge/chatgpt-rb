#!/usr/bin/env ruby

require "dotenv/load"
require "colorize"
require "reline"
require "optparse"
require_relative "./../lib/chatgpt_rb"

begin
  stty_save = `stty -g`.chomp
rescue
end

options = {
  key: ENV["OPEN_AI_KEY"],
  model: "gpt-3.5-turbo",
  base_uri: "https://api.openai.com/v1",
  functions_files: [],
}

OptionParser.new do |opts|
  opts.banner = "Usage: chatgpt-rb [options]"

  opts.on("-f", "--file FILE", "Load a previous conversation from FILE") do |file|
    options[:file] = file
  end

  opts.on("-k", "--api-key KEY", "Use the provided API key for authentication") do |key|
    options[:key] = key
  end

  opts.on("-m", "--model MODEL", "Use the provided MODEL (Default: #{options[:model]})") do |model|
    options[:model] = model
  end

  opts.on("-b", "--base-uri URI", "Use the provided base URI (Default: #{options[:base_uri]})") do |uri|
    options[:base_uri] = uri
  end

  opts.on("-u", "--functions-file FILE", "Add functions defined in FILE to your conversation") do |functions_file|
    options[:functions_files] << functions_file
  end

  opts.on("-p", "--prompt PROMPT", "Declare the PROMPT for your conversation") do |prompt|
    options[:prompt] = prompt
  end
end.parse!

begin
  puts "Type any message to talk with ChatGPT. Type '\\help' for a list of commands."

  functions = options[:functions_files].flat_map do |function_file|
              puts "Loading functions from #{function_file}"

              ChatgptRb::Conversation.new.tap do |conversation|
                ChatgptRb::DSL::Conversation.new(conversation).instance_eval(File.read(function_file))
              end.functions.values
            end

  messages = if options[:file]
               JSON.parse(File.read(options[:file])).map { |hash| hash.transform_keys(&:to_sym) }
             else
               []
             end

  if options[:prompt]
    puts "prompt> ".colorize(:blue) + options[:prompt]
  end

  conversation = ChatgptRb::Conversation.new(api_key: options.fetch(:key), model: options.fetch(:model), base_uri: options.fetch(:base_uri), messages:, functions:, prompt: options[:prompt])

  commands = [
    {
      names: ["s", "save"],
      description: "Save this conversation to a JSON file that can be reloaded later with the `-f` argument",
      implementation: ->() {
        filename = /^\\save (.+)/.match(message)[1]
        File.open(filename, "w") { |f| f.write(conversation.messages.to_json) }
        puts "saved to #{filename} ".colorize(:blue)
      }
    },
    {
      names: ["q", "quit", "exit"],
      description: "Exit the program",
      implementation: ->() {
        exit
      }
    },
    {
      names: ["d", "dump"],
      description: "Print out all messages in this converastion.",
      implementation: ->() {
        puts "dump> ".colorize(:blue) + conversation.messages.to_json
      }
    },
    {
      names: ["f", "functions"],
      description: "List all available functions.",
      implementation: ->() {
        puts "available functions:".colorize(:blue)
        functions.each do |function|
          puts "- `#{function.name}` #{function.description}".colorize(:blue)
        end
      }
    },
    {
      names: ["h", "help"],
      description: "List all commands and their description",
      implementation: ->() {
        puts commands.map { |command| "  - #{command[:names].map { |str| "`\\#{str}`".colorize(:yellow) }.join(", ")}: #{command[:description].colorize(:blue)}" }.join("\n")
      }
    }
  ]

  while message = Reline.readline("me> ".colorize(:red), true) do
    input = message.chomp
    if (command = commands.find { |command| command[:names].any? { |name| "\\#{name}" == input } })
      command[:implementation].call
    else
      print("ai> ".colorize(:yellow))
      conversation.ask(message) { |fragment| print(fragment) }
      puts
    end
  end
rescue Interrupt
  puts "^C"
  `stty #{stty_save}` if stty_save
  exit
end
